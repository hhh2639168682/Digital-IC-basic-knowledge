# CDC

# clka<clkb 慢到快


**单bit**
两级触发器同步


**多bit** 
1. 引入使能信号；多bit同步器
![](media/17025390698177/17025395799965.png)


2. 先采样比较，再赋值
    先打两拍采样进来，再对该两拍的值进行比较
    ```
    if(cnt_f1 == cnt_f2)
    begin
        fast_cnt <= fast_cnt_f2;
    end
    ```


# clka>clkb 快到慢
**单bit慢变信号** 


1. 脉冲同步器（翻转电路）：
总体思路是将A时钟域的脉冲信号转换为电平信号，打两拍后再转换为B时钟域的脉冲信号


2. 先用移位寄存器进行信号的展宽，再同步，展宽倍数大于时钟信号之间的倍数(防止丢脉冲)


**单bit快变信号**
如果是计数脉冲，可将计数值同步到慢时钟。如果不是，采用异步fifo


**多bit**  

*握手机制*
1. 设备1将 valid 信号置1，告诉设备2，数据准备就绪了，请查收


2. 设备2此刻正处于忙碌状态无法接收数据，设备2将 ready 信号保持为0


3. 设备2空闲了，将 ready 信号置1接收设备1的数据


4. 设备1看到设备2的 ready 为1，它知道设备2已经接收好数据了，将 valid 置0同时撤销数据，准备下一次发送

*异步FIFO*
![](media/17025390698177/17025393511424.png)

1. 第1部分是双口RAM，用于数据的存储。

2. 第2部分是数据写入控制器

3. 第3部分是数据读取控制器

4. 读指针同步器

   使用写时钟的两级触发器采集读指针，输出到数据写入控制器。

5. 写指针同步器

   使用读时钟的两级触发器采集写指针，输出到数据读取控制器。

6. 空满判断
当读写地址的格雷码仅有最高的2bit不同时，FIFO满；当读写地址完全相同时，FIFO空。


**跨时钟路径不要存在combinational logic**
*容易产生毛刺*


**边沿检测需要先采样该信号，再对信号的边沿进行检测**
*用第二拍和第三拍进行检测判断，关键信号用第三，第四拍*


**跨时钟域ram禁止使用数组**
*项目中的ram必须用memery compiler生成的ram*
*大小不超过512bit的非异步ram可使用reg数组*


**模块设计用单时钟，多时钟在跨时钟域中处理**


**多bit信号，如果是计数器信号，转换成grey再同步**
